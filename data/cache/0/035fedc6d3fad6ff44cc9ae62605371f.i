a:180:{i:0;a:3:{i:0;s:14:"document_start";i:1;a:0:{}i:2;i:0;}i:1;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:7:"Webpack";i:1;i:1;i:2;i:1;}i:2;i:1;}i:2;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:1;}i:2;i:1;}i:3;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1;}i:4;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:40:"Официальный сайт webpack ";}i:2;i:24;}i:5;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:22:"https://webpack.js.org";i:1;N;}i:2;i:64;}i:6;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:90;}i:7;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:90;}i:8;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:31:"Презентация Webpack
";}i:2;i:92;}i:9;a:3:{i:0;s:13:"internalmedia";i:1;a:7:{i:0;s:13:":webpack.pptx";i:1;N;i:2;N;i:3;N;i:4;N;i:5;s:5:"cache";i:6;s:7:"details";}i:2;i:123;}i:10;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:140;}i:11;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:140;}i:12;a:3:{i:0;s:13:"internalmedia";i:1;a:7:{i:0;s:15:":74de6adc11.jpg";i:1;s:0:"";i:2;N;i:3;s:3:"600";i:4;N;i:5;s:5:"cache";i:6;s:7:"details";}i:2;i:142;}i:13;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:166;}i:14;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:168;}i:15;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:35:"Зачем нужен вебпак?";i:1;i:2;i:2;i:168;}i:2;i:168;}i:16;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:168;}i:17;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:168;}i:18;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:374:"Вебпак — это сборщик модулей. Он анализирует модули приложения, создает граф зависимостей, затем собирает модули в правильном порядке в один или более бандл (bundle), на который может ссылаться файл «index.html». ";}i:2;i:217;}i:19;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:591;}i:20;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:78:"
App.js ->       |
Dashboard.js -> | Bundler | -> bundle.js
About.js ->     |
";i:1;N;i:2;N;}i:2;i:598;}i:21;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:687;}i:22;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:54:"Какие проблемы решает вебпак?";i:1;i:2;i:2;i:687;}i:2;i:687;}i:23;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:687;}i:24;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:687;}i:25;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:282:"Обычно, при создании приложения на JavaScript, код разделяется на несколько частей (модулей). Затем в файле «index.html» необходимо указать ссылку на каждый скрипт. ";}i:2;i:755;}i:26;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1037;}i:27;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:380:"
<body>

    ...
    
    <script src="http://cdnjs.cloudflare.com/ajax/libs/jquery/2.1.4/jquery.min.js"></script>
    <script src="libs/react.min.js"></script>
    <script src='src/admin.js'></script>
    <script src='src/dashboard.js'></script>
    <script src='src/api.js'></script>
    <script src='src/auth.js'></script>
    <script src='src/rickastley.js'></script>
</body>
";i:1;N;i:2;N;}i:2;i:1044;}i:28;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1044;}i:29;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:588:"Это не только утомительно, но и подвержено ошибкам. Важно не только не забыть про какой-нибудь скрипт, но и расположить их в правильном порядке. Если загрузить скрипт, зависящий от React, до загрузки самого React, приложение сломается. Вебпак решает эти задачи. Не нужно беспокоиться о последовательном включении всех скриптов. ";}i:2;i:1434;}i:30;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2022;}i:31;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:73:"
<body>

    ...
    
    <script src='dist/bundle.js'></script>
</body>
";i:1;N;i:2;N;}i:2;i:2029;}i:32;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2029;}i:33;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:441:"Как мы скоро узнаем, сбор модулей является лишь одним из аспектов работы вебпака. При необходимости можно заставить вебпак осуществить некоторые преобразования модулей перед их добавлением в бандл. Например, преобразование SASS/LESS в обычный ";}i:2;i:2111;}i:34;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"CSS";}i:2;i:2552;}i:35;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:92:", или современного JavaScript в ES5 для старых браузеров. ";}i:2;i:2555;}i:36;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2647;}i:37;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:2649;}i:38;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:33:"Установка вебпака";i:1;i:2;i:2;i:2649;}i:2;i:2649;}i:39;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:2649;}i:40;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2649;}i:41;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:191:"После инициализации проекта с помощью npm, для работы вебпака нужно установить два пакета — webpack и webpack-cli. ";}i:2;i:2698;}i:42;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2889;}i:43;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:28:"npm i webpack webpack-cli -D";i:1;N;i:2;N;}i:2;i:2896;}i:44;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:2934;}i:45;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:17:"webpack.config.js";i:1;i:3;i:2;i:2934;}i:2;i:2934;}i:46;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:2934;}i:47;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2934;}i:48;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:302:"После установки указанных пакетов, вебпак нужно настроить. Для этого создается файл webpack.config.js, который экспортирует объект. Этот объект содержит настройки вебпака. ";}i:2;i:2963;}i:49;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3265;}i:50;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:19:"module.exports = {}";i:1;N;i:2;N;}i:2;i:3272;}i:51;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3272;}i:52;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:322:"Основной задачей вебпака является анализ модулей, их опциональное преобразование и интеллектуальное объединение в один или более бандл, поэтому вебпаку нужно знать три вещи: ";}i:2;i:3301;}i:53;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3624;}i:54;a:3:{i:0;s:10:"listo_open";i:1;a:0:{}i:2;i:3624;}i:55;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:3624;}i:56;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:3624;}i:57;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:43:" Точка входа приложения";}i:2;i:3628;}i:58;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:3671;}i:59;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:3671;}i:60;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:3671;}i:61;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:3671;}i:62;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:85:" Преобразования, которые необходимо выполнить";}i:2;i:3675;}i:63;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:3760;}i:64;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:3760;}i:65;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:3760;}i:66;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:3760;}i:67;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:104:" Место, в которое следует поместить сформированный бандл";}i:2;i:3764;}i:68;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:3868;}i:69;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:3868;}i:70;a:3:{i:0;s:11:"listo_close";i:1;a:0:{}i:2;i:3868;}i:71;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:3871;}i:72;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:18:"Настройка";i:1;i:2;i:2;i:3871;}i:2;i:3871;}i:73;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:3871;}i:74;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:3903;}i:75;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:21:"Точка входа";i:1;i:3;i:2;i:3903;}i:2;i:3903;}i:76;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:3903;}i:77;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3903;}i:78;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:338:"Сколько бы модулей не содержало приложение, всегда имеется единственная точка входа. Этот модуль включает в себя остальные. Обычно, таким файлом является index.js. Это может выглядеть так: ";}i:2;i:3936;}i:79;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4280;}i:80;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:120:"
index.js
  imports about.js
  imports dashboard.js
    imports graph.js
    imports auth.js
      imports api.js
      ";i:1;N;i:2;N;}i:2;i:4280;}i:81;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4280;}i:82;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:377:"Если мы сообщим вебпаку путь до этого файла, он использует его для создания графа зависимостей приложения. Для этого необходимо добавить свойство entry в настройки вебпака со значением пути к главному файлу: ";}i:2;i:4423;}i:83;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4800;}i:84;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:50:"
module.exports = {
    entry: './app/index.js'
}
";i:1;N;i:2;N;}i:2;i:4807;}i:85;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:4867;}i:86;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:73:"Преобразования с помощью лоадеров (loaders)";i:1;i:3;i:2;i:4867;}i:2;i:4867;}i:87;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:4867;}i:88;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4867;}i:89;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:293:"После добавления точки входа, нужно сообщить вебпаку о преобразованиях, которые необходимо выполнить перед генерацией бандла. Для этого используются лоадеры. ";}i:2;i:4952;}i:90;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5245;}i:91;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5245;}i:92;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:244:"По умолчанию при создании графика зависимостей на основе операторов import / require() вебпак способен обрабатывать только JavaScript и JSON-файлы.";}i:2;i:5247;}i:93;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5491;}i:94;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:153:"
import auth from './api/auth' // 
import config from './utils/config.json' // 
import './styles.css' // ️
import logo from './assets/logo.svg' // ️
";i:1;N;i:2;N;}i:2;i:5498;}i:95;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5498;}i:96;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:529:"Едва ли в своем приложении вы решитесь ограничиться JS и JSON-файлами, скорее всего, вам также потребуются стили, SVG, изображения и т.д. Вот где нужны лоадеры. Основной задачей лоадеров, как следует из их названия, является предоставление вебпаку возможности работать не только с JS и JSON-файлами. ";}i:2;i:5661;}i:97;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6190;}i:98;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6190;}i:99;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:190:"Первым делом нужно установить лоадер. Поскольку мы хотим загружать SVG, с помощью npm устанавливаем svg-loader. ";}i:2;i:6192;}i:100;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6382;}i:101;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:29:"
npm i svg-inline-loader -D 
";i:1;N;i:2;N;}i:2;i:6389;}i:102;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6389;}i:103;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:165:"Далее добавляем его в настройки вебпака. Все лоадеры включаются в массив объектов module.rules: ";}i:2;i:6428;}i:104;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6593;}i:105;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:89:"
module.exports = {
    entry: './app/index.js',
    module: {
        rules: []
    }
}
";i:1;N;i:2;N;}i:2;i:6600;}i:106;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6600;}i:107;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:350:"Информация о лоадере состоит из двух частей. Первая — тип обрабатываемых файлов (.svg в нашем случае). Вторая — лоадер, используемый для обработки данного типа файлов (svg-inline-loader в нашем случае). ";}i:2;i:6698;}i:108;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7048;}i:109;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:135:"
module.exports = {
  entry: './app/index.js',
  module: {
    rules: [
      { test: /\.svg$/, use: 'svg-inline-loader' }
    ]
  }
}
";i:1;N;i:2;N;}i:2;i:7055;}i:110;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7055;}i:111;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:108:"Теперь мы можем импортировать SVG-файлы. Но что насчет наших ";}i:2;i:7201;}i:112;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"CSS";}i:2;i:7309;}i:113;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:72:"-файлов? Для стилей используется css-loader. ";}i:2;i:7312;}i:114;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7384;}i:115;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:22:"
npm i css-loader -D 
";i:1;N;i:2;N;}i:2;i:7391;}i:116;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:180:"
module.exports = {
  entry: './app/index.js',
  module: {
    rules: [
      { test: /\.svg$/, use: 'svg-inline-loader' },
      { test: /\.css$/, use: 'css-loader' }
    ]
  }
}
";i:1;N;i:2;N;}i:2;i:7428;}i:117;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7428;}i:118;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:78:"Теперь мы можем импортировать как SVG, так и ";}i:2;i:7620;}i:119;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"CSS";}i:2;i:7698;}i:120;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:242:"-файлы. Однако для того, чтобы наши стили работали корректно, нужно добавить еще один лоадер. Благодаря css-loader мы можем импортировать ";}i:2;i:7701;}i:121;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"CSS";}i:2;i:7943;}i:122;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:344:"-файлы. Но это не означает, что они будут включены в DOM. Мы хотим не только импортировать такие файлы, но и поместить их в тег <style>, чтобы они применялись к элементам DOM. Для этого нужен style-loader. ";}i:2;i:7946;}i:123;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:8290;}i:124;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:24:"
npm i style-loader -D 
";i:1;N;i:2;N;}i:2;i:8297;}i:125;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:200:"
module.exports = {
  entry: './app/index.js',
  module: {
    rules: [
      { test: /\.svg$/, use: 'svg-inline-loader' },
      { test: /\.css$/, use: [ 'style-loader', 'css-loader' ] }
    ]
  }
}
";i:1;N;i:2;N;}i:2;i:8337;}i:126;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:8337;}i:127;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:87:"Обратите внимание, что поскольку для обработки ";}i:2;i:8547;}i:128;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"CSS";}i:2;i:8634;}i:129;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:553:"-файлов используется два лоадера, значением свойства use является массив. Также обратите внимание на порядок следования лоадеров, сначала style-loader, затем css-loader. Это важно. Вебпак будет применять их в обратном порядке. Сначала он использует css-loader для импорта './styles.css', затем style-loader для внедрения стилей в DOM. ";}i:2;i:8637;}i:130;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:9190;}i:131;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:9190;}i:132;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:407:"Лоадеры могут использоваться не только для импорта файлов, но и для их преобразования. Самым популярным является преобразование JavaScript следующего поколения в современный JavaScript с помощью Babel. Для этого используется babel-loader. ";}i:2;i:9192;}i:133;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:9599;}i:134;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:24:"
npm i babel-loader -D 
";i:1;N;i:2;N;}i:2;i:9606;}i:135;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:248:"
module.exports = {
  entry: './app/index.js',
  module: {
    rules: [
      { test: /\.svg$/, use: 'svg-inline-loader' },
      { test: /\.css$/, use: [ 'style-loader', 'css-loader' ] },
      { test: /\.(js)$/, use: 'babel-loader' }
    ]
  }
}
";i:1;N;i:2;N;}i:2;i:9645;}i:136;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:9645;}i:137;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:90:"Существуют лоадеры почти для любого типа файлов. ";}i:2;i:9903;}i:138;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:9993;}i:139;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:9995;}i:140;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:23:"Точка выхода";i:1;i:3;i:2;i:9995;}i:2;i:9995;}i:141;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:9995;}i:142;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:9995;}i:143;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:297:"Теперь вебпак знает о точке входа и лоадерах. Следующим шагом является указание директории для бандла. Для этого нужно добавить свойство output в настройки вебпака. ";}i:2;i:10031;}i:144;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:10328;}i:145;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:370:"
const path = require('path')

module.exports = {
  entry: './app/index.js',
  module: {
    rules: [
      { test: /\.svg$/, use: 'svg-inline-loader' },
      { test: /\.css$/, use: [ 'style-loader', 'css-loader' ] },
      { test: /\.(js)$/, use: 'babel-loader' }
    ]
  },
  output: {
    path: path.resolve(__dirname, 'dist'),
    filename: 'index_bundle.js'
  }
}
";i:1;N;i:2;N;}i:2;i:10335;}i:146;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:10335;}i:147;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:66:"Весь процесс выглядит примерно так: ";}i:2;i:10714;}i:148;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:10781;}i:149;a:3:{i:0;s:10:"listo_open";i:1;a:0:{}i:2;i:10781;}i:150;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:10781;}i:151;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:10781;}i:152;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:94:" Вебпак получает точку входа, находящуюся в ./app/index.js";}i:2;i:10785;}i:153;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:10879;}i:154;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:10879;}i:155;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:10879;}i:156;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:10879;}i:157;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:116:" Он анализирует операторы import / require и создает граф зависимостей";}i:2;i:10883;}i:158;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:10999;}i:159;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:10999;}i:160;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:10999;}i:161;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:10999;}i:162;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:161:" Вебпак начинает собирать бандл, преобразовывая код с помощью соответствующих лоадеров";}i:2;i:11003;}i:163;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:11164;}i:164;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:11164;}i:165;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:11164;}i:166;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:11164;}i:167;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:84:" Он собирает бандл и помещает его в dist/index_bundle.js";}i:2;i:11168;}i:168;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:11252;}i:169;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:11252;}i:170;a:3:{i:0;s:11:"listo_close";i:1;a:0:{}i:2;i:11252;}i:171;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:11256;}i:172;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:12:"Ссылки";i:1;i:2;i:2;i:11256;}i:2;i:11256;}i:173;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:11256;}i:174;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:11256;}i:175;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:29:"Сылка на статью ";}i:2;i:11283;}i:176;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:32:"https://habr.com/ru/post/514838/";i:1;N;}i:2;i:11312;}i:177;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:11344;}i:178;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:11345;}i:179;a:3:{i:0;s:12:"document_end";i:1;a:0:{}i:2;i:11345;}}