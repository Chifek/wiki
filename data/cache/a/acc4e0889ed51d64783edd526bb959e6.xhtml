
<h1 class="sectionedit1" id="composerшпаргалка_команд">Composer: Шпаргалка команд</h1>
<div class="level1">

<p>
источник: <a href="https://phpprofi.ru/blogs/post/52" class="urlextern" target="_blank" title="https://phpprofi.ru/blogs/post/52" rel="ugc nofollow noopener">тут</a>
</p>

<p>
Коротко и ясно обо всех командах Composer.
</p>

<p>
<code>composer require vendor/package</code>	Добавляет требуемый пакет в файл composer.json и устанавливает его в ваш проект.
</p>

<p>
Команда require изменяет composer.json, находящийся в текущей папке. Если пакету требуются зависимости, то они будут установлены или обновлены. А также будет обновлён composer.lock.
</p>

<p>
<code>composer install</code>	Если файла composer.lock нет, резолвит зависимости исходя из composer.json и создаёт его. Далее, анализирует файл composer.lock, скачивает и устанавливает указанные в нём версии пакетов.
</p>

<p>
Опция –no-scripts полезна для обхода запуска скриптов, указанных в pre- и post- настройках.
composer update	Обновляет ваши зависимости до последних версий и обновляет composer.lock.
</p>

<p>
Команда update резолвит зависимости чтобы получить самые последние версии зависящих друг от друга пакетов.
composer update –lock	Иногда, вы можете получить такое предупреждение:
</p>

<p>
<code> Warning: The lock file is not up to date with the latest changes in composer.json, you may be getting outdated dependencies, run update to update them.</code>
Это может произойти после того, как вы вручную редактировали composer.json (добавляли или изменяли description, authors, extra и т. д.). Даже если ваши изменения незначимы для Composer, он обнаруживает, что md5sum файла изменена, и предупреждает, что эти изменения не учтены в файле composer.lock.
</p>

<p>
Поэтому, чтобы подавить это предупреждение, вы можете просто запустить команду <code>update –lock</code> для обновления lock-файла без обновления самих пакетов.
<code>composer dump-autoload –optimize</code>	Если вам нужно обновить загрузчик, т. к. появились новые классы, вы можете выполнить команду dump-autoload чтобы избежать установки или обновления пакетов.
</p>

<p>
Используйте ключ <code>–optimize</code> для преобразования PSR-0 в автозагрузку как для classmap, чтобы автозагрузчик был наиболее быстрым. Это настоятельно рекомендуется для production (вы можете получить 20% прирост), но может занять немного времени для запуска, так что это на данный момент не сделано по умолчанию.
</p>

<p>
Также вы можете использовать dumpautoload псевдоним.
</p>

<p>
<code>composer about</code>	Краткая информация о Composer.
</p>

<p>
<code>composer archive vendor/package</code>	Создать архив для указанного пакета. Команда также может быть использована для архивирования всего проекта без исключенных/игнорируемых файлов.
</p>

<p>
<code>composer browse</code>	Псевдоним для home, открывает <abbr title="Uniform Resource Locator">URL</abbr> пакета или его домашнюю страницу в браузере.
</p>

<p>
<code>composer clear-cache</code>	Псевдоним команды clearcache, очищает внутренний кэш пакетов Composer-а.
</p>

<p>
<code>composer config –list</code>	Позволяет редактировать некоторые основные параметры Composer-а либо в локальном файле composer.json, либо в глобальном файле config.json.
</p>

<p>
<code>composer create-project vendor/package dir/</code>	Создать новый проект из указанного пакета в указанном каталоге.
</p>

<p>
<code>composer depends vendor/package</code>	Сообщает вам какие другие пакеты зависят от конкретного (указанного) пакета. Вы можете указать какие типы связей (require, require-dev) должны быть включены в листинг. По умолчанию выводятся оба.
composer diagnose	Если вы считаете, что нашли ошибку, или что-то ведет себя странно, возможно, вы захотите выполнить команду диагностики для выполнения автоматизированной проверки многих общих проблем.
composer global	Команда global позволяет другие команды такие, как install, require или update запускать так, как если бы вы запускали их из каталога COMPOSER_HOME.
</p>

<p>
Это может использоваться для того, чтобы установить командные утилиты глобально. Если вы добавите <code>$COMPOSER_HOME/vendor/bin</code> в переменную $PATH вашего окружения, то запуск утилит станет совсем простым.
</p>

<p>
Например, установите php-cs-fixer:
<code>$ php composer.phar global require fabpot/php-cs-fixer:dev-master</code>
Теперь исполняемый файл php-cs-fixer доступен глобально и вы можете запустить его из любого места (конечно, если вы настроили вашу переменную PATH).
<code>composer help [command]</code>	Отображает справки для всех других команд: <code>composer.phar help install</code>.
<code>composer init</code>	Создает базовый вариант файла composer.json в текущем каталоге.
</p>

<p>
При запуске команды, Composer будет интерактивно запрашивать значения полей для заполнения, используя при этом для некоторых полей умные значения по умолчанию.
composer licenses	Показать информацию о лицензиях зависимостей.
composer list	Выводит список допустимых команд.
composer remove	Удаляет пакет из секций require или require-dev: remove vendor/package vendor/package2.
composer run-script	Запустить вручную скрипты, объявленные в composer.json. Просто передайте название скрипта и при необходимости –no-dev, чтобы отключить режим dev.
composer search ключевые слова	Поиск пакетов.
</p>

<p>
Команда поиска позволяет вам искать в репозиториях текущего проекта (см. секцию «repositories» в composer.json).  Обычно это будет только packagist.org. Вам нужно просто передать команде слова для поиска.
composer self-update	Обновление самого composer.phar до последней версии.
</p>

<p>
Запуск команды self-update может решить некоторые проблемы и сэкономить ваше время.
</p>

<p>
Также вы можете использовать псевдоним selfupdate.
</p>

<p>
<code>composer show</code>	Список всех установленных пакетов (composer show).
Список всех доступных пакетов (<code>composer show –all</code>).
</p>

<p>
Инфо об указанном пакете или его специфичной версии (composer show vendor/package [версия]).
</p>

<p>
<code>composer suggest</code>	Выводит список всех пакетов, предложенных установленными. Опционально вы можете передать одно или несколько имён пакетов в формате vendor/package чтобы ограничить вывод только теми, что были предложены указанными.
</p>

<p>
<code>composer status</code>	Если вам часто приходится модифицировать код своих зависимостей, а они были установленны «из исходников» (см. опцию –prefer-source команды require), то
команда status позволит вам проверить есть ли у вас локальные изменения в любой из них.
</p>

<p>
<code>composer validate</code>	Проверяет файл composer.json.
</p>

<p>
Вы всегда должны запускать команду <code>validate</code> перед тем, как коммитить ваш composer.json и перед установкой релизного тега. Эта команда проверит его на ошибки.
</p>

</div>
