
<h1 class="sectionedit1" id="webpack">Webpack</h1>
<div class="level1">

<p>
Официальный сайт webpack <a href="https://webpack.js.org" class="urlextern" target="_blank" title="https://webpack.js.org" rel="ugc nofollow noopener">https://webpack.js.org</a>
</p>

<p>
Презентация Webpack
<a href="/lib/exe/fetch.php?media=webpack.pptx" class="media mediafile mf_pptx" title="webpack.pptx (432.5 KB)">webpack.pptx</a>
</p>

<p>
<a href="/lib/exe/detail.php?id=webpack&amp;media=74de6adc11.jpg" class="media" title="74de6adc11.jpg"><img src="/lib/exe/fetch.php?w=600&amp;tok=d24fea&amp;media=74de6adc11.jpg" class="media" alt="" width="600" /></a>
</p>

</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;Webpack&quot;,&quot;hid&quot;:&quot;webpack&quot;,&quot;codeblockOffset&quot;:0,&quot;secid&quot;:1,&quot;range&quot;:&quot;1-167&quot;} -->
<h2 class="sectionedit2" id="зачем_нужен_вебпак">Зачем нужен вебпак?</h2>
<div class="level2">

<p>
Вебпак — это сборщик модулей. Он анализирует модули приложения, создает граф зависимостей, затем собирает модули в правильном порядке в один или более бандл (bundle), на который может ссылаться файл «index.html». 
</p>
<pre class="code">App.js -&gt;       |
Dashboard.js -&gt; | Bundler | -&gt; bundle.js
About.js -&gt;     |</pre>

</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;\u0417\u0430\u0447\u0435\u043c \u043d\u0443\u0436\u0435\u043d \u0432\u0435\u0431\u043f\u0430\u043a?&quot;,&quot;hid&quot;:&quot;\u0437\u0430\u0447\u0435\u043c_\u043d\u0443\u0436\u0435\u043d_\u0432\u0435\u0431\u043f\u0430\u043a&quot;,&quot;codeblockOffset&quot;:0,&quot;secid&quot;:2,&quot;range&quot;:&quot;168-686&quot;} -->
<h2 class="sectionedit3" id="какие_проблемы_решает_вебпак">Какие проблемы решает вебпак?</h2>
<div class="level2">

<p>
Обычно, при создании приложения на JavaScript, код разделяется на несколько частей (модулей). Затем в файле «index.html» необходимо указать ссылку на каждый скрипт. 
</p>
<pre class="code">&lt;body&gt;

    ...
    
    &lt;script src=&quot;http://cdnjs.cloudflare.com/ajax/libs/jquery/2.1.4/jquery.min.js&quot;&gt;&lt;/script&gt;
    &lt;script src=&quot;libs/react.min.js&quot;&gt;&lt;/script&gt;
    &lt;script src=&#039;src/admin.js&#039;&gt;&lt;/script&gt;
    &lt;script src=&#039;src/dashboard.js&#039;&gt;&lt;/script&gt;
    &lt;script src=&#039;src/api.js&#039;&gt;&lt;/script&gt;
    &lt;script src=&#039;src/auth.js&#039;&gt;&lt;/script&gt;
    &lt;script src=&#039;src/rickastley.js&#039;&gt;&lt;/script&gt;
&lt;/body&gt;</pre>

<p>
Это не только утомительно, но и подвержено ошибкам. Важно не только не забыть про какой-нибудь скрипт, но и расположить их в правильном порядке. Если загрузить скрипт, зависящий от React, до загрузки самого React, приложение сломается. Вебпак решает эти задачи. Не нужно беспокоиться о последовательном включении всех скриптов. 
</p>
<pre class="code">&lt;body&gt;

    ...
    
    &lt;script src=&#039;dist/bundle.js&#039;&gt;&lt;/script&gt;
&lt;/body&gt;</pre>

<p>
Как мы скоро узнаем, сбор модулей является лишь одним из аспектов работы вебпака. При необходимости можно заставить вебпак осуществить некоторые преобразования модулей перед их добавлением в бандл. Например, преобразование SASS/LESS в обычный <abbr title="Cascading Style Sheets">CSS</abbr>, или современного JavaScript в ES5 для старых браузеров. 
</p>

</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;\u041a\u0430\u043a\u0438\u0435 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u044b \u0440\u0435\u0448\u0430\u0435\u0442 \u0432\u0435\u0431\u043f\u0430\u043a?&quot;,&quot;hid&quot;:&quot;\u043a\u0430\u043a\u0438\u0435_\u043f\u0440\u043e\u0431\u043b\u0435\u043c\u044b_\u0440\u0435\u0448\u0430\u0435\u0442_\u0432\u0435\u0431\u043f\u0430\u043a&quot;,&quot;codeblockOffset&quot;:1,&quot;secid&quot;:3,&quot;range&quot;:&quot;687-2648&quot;} -->
<h2 class="sectionedit4" id="установка_вебпака">Установка вебпака</h2>
<div class="level2">

<p>
После инициализации проекта с помощью npm, для работы вебпака нужно установить два пакета — webpack и webpack-cli. 
</p>
<pre class="code">npm i webpack webpack-cli -D</pre>

</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0432\u0435\u0431\u043f\u0430\u043a\u0430&quot;,&quot;hid&quot;:&quot;\u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430_\u0432\u0435\u0431\u043f\u0430\u043a\u0430&quot;,&quot;codeblockOffset&quot;:3,&quot;secid&quot;:4,&quot;range&quot;:&quot;2649-2933&quot;} -->
<h3 class="sectionedit5" id="webpackconfigjs">webpack.config.js</h3>
<div class="level3">

<p>
После установки указанных пакетов, вебпак нужно настроить. Для этого создается файл webpack.config.js, который экспортирует объект. Этот объект содержит настройки вебпака. 
</p>
<pre class="code">module.exports = {}</pre>

<p>
Основной задачей вебпака является анализ модулей, их опциональное преобразование и интеллектуальное объединение в один или более бандл, поэтому вебпаку нужно знать три вещи: 
</p>
<ol>
<li class="level1"><div class="li"> Точка входа приложения</div>
</li>
<li class="level1"><div class="li"> Преобразования, которые необходимо выполнить</div>
</li>
<li class="level1"><div class="li"> Место, в которое следует поместить сформированный бандл</div>
</li>
</ol>

</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;webpack.config.js&quot;,&quot;hid&quot;:&quot;webpackconfigjs&quot;,&quot;codeblockOffset&quot;:4,&quot;secid&quot;:5,&quot;range&quot;:&quot;2934-3870&quot;} -->
<h2 class="sectionedit6" id="настройка">Настройка</h2>
<div class="level2">

</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430&quot;,&quot;hid&quot;:&quot;\u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430&quot;,&quot;codeblockOffset&quot;:5,&quot;secid&quot;:6,&quot;range&quot;:&quot;3871-3902&quot;} -->
<h3 class="sectionedit7" id="точка_входа">Точка входа</h3>
<div class="level3">

<p>
Сколько бы модулей не содержало приложение, всегда имеется единственная точка входа. Этот модуль включает в себя остальные. Обычно, таким файлом является index.js. Это может выглядеть так: 
</p>
<pre class="code">index.js
  imports about.js
  imports dashboard.js
    imports graph.js
    imports auth.js
      imports api.js
      </pre>

<p>
Если мы сообщим вебпаку путь до этого файла, он использует его для создания графа зависимостей приложения. Для этого необходимо добавить свойство entry в настройки вебпака со значением пути к главному файлу: 
</p>
<pre class="code">module.exports = {
    entry: &#039;./app/index.js&#039;
}</pre>

</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;\u0422\u043e\u0447\u043a\u0430 \u0432\u0445\u043e\u0434\u0430&quot;,&quot;hid&quot;:&quot;\u0442\u043e\u0447\u043a\u0430_\u0432\u0445\u043e\u0434\u0430&quot;,&quot;codeblockOffset&quot;:5,&quot;secid&quot;:7,&quot;range&quot;:&quot;3903-4866&quot;} -->
<h3 class="sectionedit8" id="преобразования_с_помощью_лоадеров_loaders">Преобразования с помощью лоадеров (loaders)</h3>
<div class="level3">

<p>
После добавления точки входа, нужно сообщить вебпаку о преобразованиях, которые необходимо выполнить перед генерацией бандла. Для этого используются лоадеры. 
</p>

<p>
По умолчанию при создании графика зависимостей на основе операторов import / require() вебпак способен обрабатывать только JavaScript и JSON-файлы.
</p>
<pre class="code">import auth from &#039;./api/auth&#039; // 
import config from &#039;./utils/config.json&#039; // 
import &#039;./styles.css&#039; // ️
import logo from &#039;./assets/logo.svg&#039; // ️</pre>

<p>
Едва ли в своем приложении вы решитесь ограничиться JS и JSON-файлами, скорее всего, вам также потребуются стили, SVG, изображения и т.д. Вот где нужны лоадеры. Основной задачей лоадеров, как следует из их названия, является предоставление вебпаку возможности работать не только с JS и JSON-файлами. 
</p>

<p>
Первым делом нужно установить лоадер. Поскольку мы хотим загружать SVG, с помощью npm устанавливаем svg-loader. 
</p>
<pre class="code">npm i svg-inline-loader -D </pre>

<p>
Далее добавляем его в настройки вебпака. Все лоадеры включаются в массив объектов module.rules: 
</p>
<pre class="code">module.exports = {
    entry: &#039;./app/index.js&#039;,
    module: {
        rules: []
    }
}</pre>

<p>
Информация о лоадере состоит из двух частей. Первая — тип обрабатываемых файлов (.svg в нашем случае). Вторая — лоадер, используемый для обработки данного типа файлов (svg-inline-loader в нашем случае). 
</p>
<pre class="code">module.exports = {
  entry: &#039;./app/index.js&#039;,
  module: {
    rules: [
      { test: /\.svg$/, use: &#039;svg-inline-loader&#039; }
    ]
  }
}</pre>

<p>
Теперь мы можем импортировать SVG-файлы. Но что насчет наших <abbr title="Cascading Style Sheets">CSS</abbr>-файлов? Для стилей используется css-loader. 
</p>
<pre class="code">npm i css-loader -D </pre>
<pre class="code">module.exports = {
  entry: &#039;./app/index.js&#039;,
  module: {
    rules: [
      { test: /\.svg$/, use: &#039;svg-inline-loader&#039; },
      { test: /\.css$/, use: &#039;css-loader&#039; }
    ]
  }
}</pre>

<p>
Теперь мы можем импортировать как SVG, так и <abbr title="Cascading Style Sheets">CSS</abbr>-файлы. Однако для того, чтобы наши стили работали корректно, нужно добавить еще один лоадер. Благодаря css-loader мы можем импортировать <abbr title="Cascading Style Sheets">CSS</abbr>-файлы. Но это не означает, что они будут включены в DOM. Мы хотим не только импортировать такие файлы, но и поместить их в тег &lt;style&gt;, чтобы они применялись к элементам DOM. Для этого нужен style-loader. 
</p>
<pre class="code">npm i style-loader -D </pre>
<pre class="code">module.exports = {
  entry: &#039;./app/index.js&#039;,
  module: {
    rules: [
      { test: /\.svg$/, use: &#039;svg-inline-loader&#039; },
      { test: /\.css$/, use: [ &#039;style-loader&#039;, &#039;css-loader&#039; ] }
    ]
  }
}</pre>

<p>
Обратите внимание, что поскольку для обработки <abbr title="Cascading Style Sheets">CSS</abbr>-файлов используется два лоадера, значением свойства use является массив. Также обратите внимание на порядок следования лоадеров, сначала style-loader, затем css-loader. Это важно. Вебпак будет применять их в обратном порядке. Сначала он использует css-loader для импорта &#039;./styles.css&#039;, затем style-loader для внедрения стилей в DOM. 
</p>

<p>
Лоадеры могут использоваться не только для импорта файлов, но и для их преобразования. Самым популярным является преобразование JavaScript следующего поколения в современный JavaScript с помощью Babel. Для этого используется babel-loader. 
</p>
<pre class="code">npm i babel-loader -D </pre>
<pre class="code">module.exports = {
  entry: &#039;./app/index.js&#039;,
  module: {
    rules: [
      { test: /\.svg$/, use: &#039;svg-inline-loader&#039; },
      { test: /\.css$/, use: [ &#039;style-loader&#039;, &#039;css-loader&#039; ] },
      { test: /\.(js)$/, use: &#039;babel-loader&#039; }
    ]
  }
}</pre>

<p>
Существуют лоадеры почти для любого типа файлов. 
</p>

</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;\u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043b\u043e\u0430\u0434\u0435\u0440\u043e\u0432 (loaders)&quot;,&quot;hid&quot;:&quot;\u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f_\u0441_\u043f\u043e\u043c\u043e\u0449\u044c\u044e_\u043b\u043e\u0430\u0434\u0435\u0440\u043e\u0432_loaders&quot;,&quot;codeblockOffset&quot;:7,&quot;secid&quot;:8,&quot;range&quot;:&quot;4867-9994&quot;} -->
<h3 class="sectionedit9" id="точка_выхода">Точка выхода</h3>
<div class="level3">

<p>
Теперь вебпак знает о точке входа и лоадерах. Следующим шагом является указание директории для бандла. Для этого нужно добавить свойство output в настройки вебпака. 
</p>
<pre class="code">const path = require(&#039;path&#039;)

module.exports = {
  entry: &#039;./app/index.js&#039;,
  module: {
    rules: [
      { test: /\.svg$/, use: &#039;svg-inline-loader&#039; },
      { test: /\.css$/, use: [ &#039;style-loader&#039;, &#039;css-loader&#039; ] },
      { test: /\.(js)$/, use: &#039;babel-loader&#039; }
    ]
  },
  output: {
    path: path.resolve(__dirname, &#039;dist&#039;),
    filename: &#039;index_bundle.js&#039;
  }
}</pre>

<p>
Весь процесс выглядит примерно так: 
</p>
<ol>
<li class="level1"><div class="li"> Вебпак получает точку входа, находящуюся в ./app/index.js</div>
</li>
<li class="level1"><div class="li"> Он анализирует операторы import / require и создает граф зависимостей</div>
</li>
<li class="level1"><div class="li"> Вебпак начинает собирать бандл, преобразовывая код с помощью соответствующих лоадеров</div>
</li>
<li class="level1"><div class="li"> Он собирает бандл и помещает его в dist/index_bundle.js</div>
</li>
</ol>

</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;\u0422\u043e\u0447\u043a\u0430 \u0432\u044b\u0445\u043e\u0434\u0430&quot;,&quot;hid&quot;:&quot;\u0442\u043e\u0447\u043a\u0430_\u0432\u044b\u0445\u043e\u0434\u0430&quot;,&quot;codeblockOffset&quot;:17,&quot;secid&quot;:9,&quot;range&quot;:&quot;9995-11255&quot;} -->
<h2 class="sectionedit10" id="ссылки">Ссылки</h2>
<div class="level2">

<p>
Сылка на статью <a href="https://habr.com/ru/post/514838/" class="urlextern" target="_blank" title="https://habr.com/ru/post/514838/" rel="ugc nofollow noopener">https://habr.com/ru/post/514838/</a>
</p>

</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;\u0421\u0441\u044b\u043b\u043a\u0438&quot;,&quot;hid&quot;:&quot;\u0441\u0441\u044b\u043b\u043a\u0438&quot;,&quot;codeblockOffset&quot;:18,&quot;secid&quot;:10,&quot;range&quot;:&quot;11256-&quot;} -->